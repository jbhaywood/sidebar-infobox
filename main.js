/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SidebarInfobox
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// view.ts
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  imageProperty: "image",
  imagesProperty: "images",
  excludeProperties: "",
  maxImageHeight: 500,
  sortProperties: false,
  capitalizePropertyName: false
};
var SidebarInfoboxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Maximum Image Height").setDesc("Value in pixels. Set to zero for no maximum.").addText((text) => {
      var _a;
      return text.setPlaceholder(DEFAULT_SETTINGS.maxImageHeight.toString()).setValue((_a = this.plugin.settings.maxImageHeight) == null ? void 0 : _a.toString()).onChange(async (value) => {
        this.plugin.settings.maxImageHeight = parseInt(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Image Property").setDesc("The name of the frontmatter property to use for the main image shown above the properties table. It should be the name of the image file located somewhere in the vault.").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.imageProperty).setValue(this.plugin.settings.imageProperty).onChange(async (value) => {
      this.plugin.settings.imageProperty = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Images Property").setDesc("The name of the frontmatter property to use for additional images. This is an array property, with each value being the name of the image file located somewhere in the vault.").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.imagesProperty).setValue(this.plugin.settings.imagesProperty).onChange(async (value) => {
      this.plugin.settings.imagesProperty = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Excluded Properties").setDesc("The names of the frontmatter properties to exclude from the table. List them all on one line, with each followed by a comma.").addTextArea((text) => text.setValue(this.plugin.settings.excludeProperties).onChange(async (value) => {
      this.plugin.settings.excludeProperties = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sort Properties").setDesc("Whether or not to sort the properties alphabetically in the table.").addToggle((toggle) => toggle.setValue(this.plugin.settings.sortProperties).onChange(async (value) => {
      this.plugin.settings.sortProperties = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Capitalize Property Names").setDesc("Whether or not to capitalize the property names.").addToggle((toggle) => toggle.setValue(this.plugin.settings.capitalizePropertyName).onChange(async (value) => {
      this.plugin.settings.capitalizePropertyName = value;
      await this.plugin.saveSettings();
    }));
  }
};

// view.ts
var viewType = "SidebarInfoboxView";
var SidebarInfoboxView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.observers = [];
    this.contentEl.addClass("sidebar-infobox-view");
    this.setNoContentMessage();
  }
  async onOpen() {
    console.log("Sidebar Infobox view opened");
    this.setViewContent();
  }
  setViewContent() {
    this.disconnectObservers();
    let frontmatter;
    const activeFile = this.tryGetActiveFile();
    if (activeFile) {
      const metadata = this.app.metadataCache.getFileCache(activeFile);
      if (metadata == null ? void 0 : metadata.frontmatter) {
        frontmatter = metadata.frontmatter;
      }
    }
    if (frontmatter) {
      this.contentEl.empty();
      const root = this.contentEl.createDiv("sidebar-infobox-view");
      const imagePropertyName = this.plugin.settings.imageProperty || DEFAULT_SETTINGS.imageProperty;
      const imagesPropertyName = this.plugin.settings.imagesProperty || DEFAULT_SETTINGS.imagesProperty;
      const excludedProperties = this.plugin.settings.excludeProperties.split(",").map((str) => str.trim());
      if (imagePropertyName) {
        excludedProperties.push(imagePropertyName);
      }
      if (imagesPropertyName) {
        excludedProperties.push(imagesPropertyName);
      }
      let values = [...Object.entries(frontmatter)];
      if (this.plugin.settings.sortProperties) {
        values.sort((a, b) => a[0].localeCompare(b[0]));
      }
      const imgPanel = root.createDiv("sidebar-infobox-image-viewer");
      const imageLinks = [];
      const table = root.createEl("table");
      const head = table.createTHead();
      const row = head.createEl("tr");
      row.createEl("th", { text: "Stat" });
      row.createEl("th", { text: "Value" });
      const body = table.createTBody();
      for (const item of values) {
        const propName = item[0];
        const propValue = item[1];
        if (propName === imagePropertyName) {
          imageLinks.unshift(propValue);
          continue;
        }
        if (propName === imagesPropertyName) {
          for (const val of propValue) {
            imageLinks.push(val);
          }
          continue;
        }
        if (excludedProperties.includes(propName)) {
          continue;
        }
        const row2 = body.createEl("tr");
        const propNameCell = row2.createEl("td", { text: propName });
        if (this.plugin.settings.capitalizePropertyName) {
          propNameCell.style.textTransform = "capitalize";
        }
        const valueCell = row2.createEl("td");
        if (this.isUrl(propValue)) {
          const link = valueCell.createEl("a", { text: propValue.split("/").last() });
          link.href = propValue;
        } else {
          if (activeFile) {
            this.setEditableText(propName, propValue, activeFile, valueCell);
          }
        }
      }
      if (imageLinks.length) {
        const img = imgPanel.createEl("img", { cls: "main-image" });
        let curIdx = 0;
        this.setImage(imageLinks[curIdx], img);
        if (imageLinks.length > 1) {
          const leftArrow = imgPanel.createEl("button", { text: "Previous", cls: "prev-btn" });
          const rightArrow = imgPanel.createEl("button", { text: "Next", cls: "next-btn" });
          leftArrow.addEventListener("click", () => {
            curIdx = curIdx > 0 ? curIdx - 1 : imageLinks.length - 1;
            this.setImageFromClick(imageLinks[curIdx], img);
          });
          rightArrow.addEventListener("click", () => {
            curIdx = curIdx < imageLinks.length - 1 ? curIdx + 1 : 0;
            this.setImageFromClick(imageLinks[curIdx], img);
          });
        }
      } else {
        imgPanel.remove();
      }
    } else {
      this.setNoContentMessage();
    }
  }
  isUrl(str) {
    return /^(https?:\/\/).+/i.exec(str);
  }
  // This uses 'lastActiveFile', which isn't documented. But it's necessary for the case
  // where the user switches to a different sidebar view and then back to the infobox.
  tryGetActiveFile() {
    let activeFile = this.app.workspace.lastActiveFile;
    if (!activeFile) {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (activeView && activeView.file) {
        activeFile = activeView.file;
      }
    }
    return activeFile;
  }
  setEditableText(propName, propValue, activeFile, tableCell) {
    const input = tableCell.createDiv({
      text: propValue,
      cls: "sidebar-infobox-edit-box",
      attr: { "contenteditable": "" }
    });
    const config = {
      childList: true,
      subtree: true,
      characterData: true
    };
    const observer = new MutationObserver(
      (0, import_obsidian2.debounce)(
        (mutations) => {
          for (const mutation of mutations) {
            if (mutation.type === "characterData") {
              this.app.fileManager.processFrontMatter(activeFile, (fm) => {
                fm[propName] = mutation.target.textContent;
              });
            }
            if (mutation.type === "childList") {
              this.app.fileManager.processFrontMatter(activeFile, (fm) => {
                fm[propName] = mutation.target.textContent;
              });
              break;
            }
          }
        },
        500,
        true
      )
    );
    this.observers.push(observer);
    observer.observe(input, config);
  }
  setImageFromClick(fileName, img) {
    this.internalViewChange = true;
    this.setImage(fileName, img);
    setTimeout(() => {
      this.internalViewChange = false;
    }, 200);
  }
  setImage(fileName, img) {
    var _a;
    if (fileName.includes("[[")) {
      const imageFileMatch = /!?\[\[(?<filename>.+)\]\]/.exec(fileName);
      fileName = ((_a = imageFileMatch == null ? void 0 : imageFileMatch.groups) == null ? void 0 : _a.filename) || "";
    }
    if (!fileName)
      return;
    new Promise((resolve, reject) => {
      const imageFile = this.app.vault.getFiles().find((f) => f.name === fileName);
      let maxHeight = DEFAULT_SETTINGS.maxImageHeight.toString() + "px";
      if (this.plugin.settings.maxImageHeight === 0) {
        maxHeight = "none";
      } else if (this.plugin.settings.maxImageHeight) {
        maxHeight = this.plugin.settings.maxImageHeight.toString() + "px";
      }
      img.style.maxHeight = maxHeight;
      if (imageFile) {
        resolve(imageFile);
      } else {
        reject("Can't locate image file.");
      }
    }).then((imageFile) => {
      const file = this.app.vault.adapter.getResourcePath(imageFile.path);
      img.src = file;
    }).catch((message) => {
      img.remove();
      console.log(`Sidebar Infobox: ${message}`);
    });
  }
  setNoContentMessage() {
    this.contentEl.empty();
    this.contentEl.createDiv({
      cls: "pane-empty",
      text: "Nothing to display."
    });
  }
  disconnectObservers() {
    for (const observer of this.observers) {
      observer.disconnect();
      this.observers = [];
    }
  }
  getViewType() {
    return viewType;
  }
  getDisplayText() {
    return "Sidebar Infobox";
  }
  getIcon() {
    return "lines-of-text";
  }
  async onClose() {
    this.disconnectObservers();
    await super.onClose();
  }
};

// main.ts
var SidebarInfobox = class extends import_obsidian3.Plugin {
  async onload() {
    const { app } = this;
    await this.loadSettings();
    this.registerView(
      viewType,
      (leaf) => new SidebarInfoboxView(leaf, this)
    );
    this.addSettingTab(new SidebarInfoboxSettingTab(this.app, this));
    this.addCommand({
      id: "show-sidebar-infobox",
      name: "Show Sidebar Infobox",
      callback: async () => {
        this.initLeaf();
      }
    });
    this.registerEvent(
      app.metadataCache.on(
        "changed",
        (0, import_obsidian3.debounce)(
          (file) => {
            var _a;
            const activeView = app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
            if (activeView && file === activeView.file) {
              (_a = this.view) == null ? void 0 : _a.setViewContent();
            }
          },
          100,
          true
        )
      )
    );
    this.registerEvent(
      app.workspace.on(
        "active-leaf-change",
        (0, import_obsidian3.debounce)(
          () => {
            var _a, _b;
            if (!((_a = this.view) == null ? void 0 : _a.internalViewChange)) {
              (_b = this.view) == null ? void 0 : _b.setViewContent();
            }
          },
          100,
          true
        )
      )
    );
    (async () => {
      await this.initLeaf();
    })();
  }
  onunload() {
    this.app.workspace.getLeavesOfType(viewType).forEach((leaf) => leaf.detach());
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(viewType);
    if (!(leaves == null ? void 0 : leaves.length))
      return null;
    return leaves[0].view;
  }
  async initLeaf() {
    if (this.view)
      return this.revealLeaf();
    if (this.app.workspace) {
      await this.app.workspace.getRightLeaf(false).setViewState({
        type: viewType
      });
      this.revealLeaf();
    }
  }
  revealLeaf() {
    var _a;
    const leaves = this.app.workspace.getLeavesOfType(viewType);
    if (!(leaves == null ? void 0 : leaves.length))
      return;
    this.app.workspace.revealLeaf(leaves[0]);
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (activeView) {
      (_a = this.view) == null ? void 0 : _a.setViewContent();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
